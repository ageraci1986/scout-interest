const axios = require('axios');

const BASE_URL = 'https://scout-interest-optimized-q90ownsyq-angelo-geracis-projects.vercel.app';

async function testCompleteWorkflow() {
  console.log('üöÄ TEST COMPLET DU WORKFLOW - UPLOAD ‚Üí TARGETING ‚Üí META API ‚Üí R√âCUP√âRATION');
  console.log('==========================================================================');

  try {
    // 1. Cr√©er un projet via upload
    console.log('\nüì§ √âTAPE 1: Upload de fichier (cr√©ation du projet)');
    console.log('--------------------------------------------------');

    const uploadResponse = await axios.post(
      `${BASE_URL}/api/upload/file/json`,
      {
        filename: 'test-complete-workflow.csv',
        postalCodes: ['75001', '75002']
      },
      { headers: { 'Content-Type': 'application/json' } }
    );

    if (!uploadResponse.data?.success) {
      throw new Error('Upload √©chou√©');
    }

    const projectId = uploadResponse.data.project_id;
    console.log(`‚úÖ Projet cr√©√©: ${projectId}`);
    console.log(`   - Status: ${uploadResponse.data.status}`);
    console.log(`   - Message: ${uploadResponse.data.message}`);

    // 2. Attendre un peu puis v√©rifier l'√©tat initial
    console.log('\n‚è≥ Attente de 2 secondes...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    console.log('\nüìä √âTAPE 2: V√©rification de l\'√©tat initial');
    console.log('--------------------------------------------');

    const initialResponse = await axios.get(`${BASE_URL}/api/projects/${projectId}`);
    if (initialResponse.data?.success && initialResponse.data?.data?.project) {
      const project = initialResponse.data.data.project;
      console.log(`‚úÖ Projet r√©cup√©r√©:`);
      console.log(`   - Status: ${project.status}`);
      console.log(`   - R√©sultats: ${project.results?.length || 0}`);
      
      if (project.results && project.results.length > 0) {
        console.log('\nüìã R√©sultats initiaux (devraient √™tre √† 0):');
        project.results.forEach(result => {
          const geoEstimate = result.postal_code_only_estimate?.audience_size || 'N/A';
          const targetingEstimate = result.postal_code_with_targeting_estimate?.audience_size || 'N/A';
          console.log(`   - ${result.postal_code}: ${geoEstimate} / ${targetingEstimate}`);
        });
      }
    }

    // 3. Valider le targeting (ce qui d√©clenche les appels Meta API)
    console.log('\nüéØ √âTAPE 3: Validation du targeting (d√©clenche Meta API)');
    console.log('--------------------------------------------------------');

    const targetingSpec = {
      age_min: 18,
      age_max: 65,
      genders: [1, 2],
      interests: [
        { id: "6003985771306", name: "Technology (computers and electronics)" }
      ],
      countries: ['US']
    };

    console.log('üìã Targeting spec √† valider:', JSON.stringify(targetingSpec, null, 2));

    const targetingResponse = await axios.patch(
      `${BASE_URL}/api/projects/${projectId}/targeting`,
      { targeting_spec: targetingSpec },
      { headers: { 'Content-Type': 'application/json' } }
    );

    console.log('\nüìä R√©ponse du targeting:');
    console.log('Status:', targetingResponse.status);
    console.log('Data:', JSON.stringify(targetingResponse.data, null, 2));

    if (targetingResponse.data?.success) {
      console.log(`\n‚úÖ Targeting valid√© avec succ√®s !`);
      console.log(`   - Total trait√©: ${targetingResponse.data.data?.totalProcessed || 0}`);
      console.log(`   - Succ√®s: ${targetingResponse.data.data?.successful || 0}`);
      console.log(`   - Erreurs: ${targetingResponse.data.data?.errors || 0}`);
    } else {
      throw new Error(`√âchec du targeting: ${targetingResponse.data?.message}`);
    }

    // 4. Attendre que le traitement Meta API se termine
    console.log('\n‚è≥ Attente du traitement Meta API (5 secondes)...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // 5. V√©rifier l'√©tat final (simulation du bouton Refresh)
    console.log('\nüîÑ √âTAPE 4: V√©rification finale (simulation du bouton Refresh)');
    console.log('----------------------------------------------------------------');

    const finalResponse = await axios.get(`${BASE_URL}/api/projects/${projectId}`);
    if (finalResponse.data?.success && finalResponse.data?.data?.project) {
      const project = finalResponse.data.data.project;
      console.log(`‚úÖ √âtat final du projet:`);
      console.log(`   - Status: ${project.status}`);
      console.log(`   - R√©sultats: ${project.results?.length || 0}`);

      if (project.results && project.results.length > 0) {
        console.log('\nüìä R√©sultats finaux avec Meta API:');
        project.results.forEach(result => {
          const geoEstimate = result.postal_code_only_estimate?.audience_size || 'N/A';
          const targetingEstimate = result.postal_code_with_targeting_estimate?.audience_size || 'N/A';
          console.log(`   - ${result.postal_code}: ${geoEstimate} / ${targetingEstimate}`);

          // V√©rifier si les estimations sont diff√©rentes
          if (geoEstimate !== 'N/A' && targetingEstimate !== 'N/A') {
            if (geoEstimate > targetingEstimate) {
              const reduction = ((geoEstimate - targetingEstimate) / geoEstimate * 100).toFixed(1);
              console.log(`     ‚úÖ Logique correcte: targeting r√©duit l'audience de ${reduction}%`);
            } else if (geoEstimate === targetingEstimate) {
              console.log(`     ‚ö†Ô∏è  M√™me audience: le targeting n'affecte pas l'estimation`);
            } else {
              console.log(`     ‚ùå Logique incorrecte: le targeting augmente l'audience`);
            }
          }
        });
      }
    }

    console.log('\nüéâ TEST TERMIN√â AVEC SUCC√àS !');
    console.log('================================');
    console.log('‚úÖ Upload ‚Üí Targeting ‚Üí Meta API ‚Üí R√©cup√©ration des donn√©es : TOUT FONCTIONNE !');

  } catch (error) {
    console.error('\n‚ùå ERREUR DE TEST:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
  }
}

// Lancer le test
testCompleteWorkflow();

