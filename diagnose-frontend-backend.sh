#!/bin/bash
# üîç Diagnostic Complet Frontend-Backend
# Script pour identifier le probl√®me exact de communication

set -e

echo "üîç Diagnostic Complet Frontend-Backend..."
echo "========================================"
echo ""

# Configuration
FRONTEND_URL="https://frontend-g7xl4b1k6-angelo-geracis-projects.vercel.app"
BACKEND_URL="https://scout-interest-optimized-lwolbw6lc-angelo-geracis-projects.vercel.app"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Test 1: V√©rification Frontend
log_info "Test 1: V√©rification Frontend..."
if response=$(curl -s -I "$FRONTEND_URL" 2>/dev/null); then
    if echo "$response" | grep -q "HTTP/2 200"; then
        log_success "Frontend accessible (HTTP 200)"
    else
        log_warning "Frontend statut inattendu"
        echo "   Statut: $response" | head -1
    fi
else
    log_error "Frontend inaccessible"
fi
echo ""

# Test 2: V√©rification Backend
log_info "Test 2: V√©rification Backend..."
if response=$(curl -s "$BACKEND_URL/api/health" 2>/dev/null); then
    if echo "$response" | grep -q "status.*OK"; then
        log_success "Backend accessible et fonctionnel"
    else
        log_warning "Backend accessible mais r√©ponse inattendue"
    fi
else
    log_error "Backend inaccessible"
fi
echo ""

# Test 3: Test CORS direct
log_info "Test 3: Test CORS direct..."
if response=$(curl -s -H "Origin: $FRONTEND_URL" -H "Access-Control-Request-Method: GET" -H "Access-Control-Request-Headers: X-Requested-With" -X OPTIONS "$BACKEND_URL/api/projects/user/anonymous" 2>/dev/null); then
    log_success "Requ√™te CORS OPTIONS r√©ussie"
else
    log_warning "Requ√™te CORS OPTIONS √©chou√©e"
fi
echo ""

# Test 4: Test API avec Origin
log_info "Test 4: Test API avec Origin..."
if response=$(curl -s -H "Origin: $FRONTEND_URL" "$BACKEND_URL/api/projects/user/anonymous" 2>/dev/null); then
    if echo "$response" | grep -q "success.*true"; then
        log_success "API accessible avec Origin header"
        echo "   Projets retourn√©s: $(echo "$response" | grep -o '"id":[0-9]*' | wc -l)"
    else
        log_warning "API accessible mais r√©ponse inattendue"
        echo "   R√©ponse: $response" | head -3
    fi
else
    log_error "API inaccessible avec Origin header"
fi
echo ""

# Test 5: V√©rification des variables d'environnement
log_info "Test 5: V√©rification CORS_ORIGIN..."
if response=$(curl -s "$BACKEND_URL/api/health" 2>/dev/null); then
    if echo "$response" | grep -q "$FRONTEND_URL"; then
        log_success "CORS_ORIGIN configur√© correctement"
    else
        log_warning "CORS_ORIGIN peut ne pas √™tre correct"
        echo "   CORS actuel: $(echo "$response" | grep -o '"cors":"[^"]*"')"
    fi
else
    log_error "Impossible de v√©rifier CORS_ORIGIN"
fi
echo ""

# Test 6: Test de communication r√©elle
log_info "Test 6: Test de communication r√©elle..."
echo "   Simuler une requ√™te depuis le frontend..."
if response=$(curl -s -H "Origin: $FRONTEND_URL" -H "Referer: $FRONTEND_URL" "$BACKEND_URL/api/projects/user/anonymous" 2>/dev/null); then
    if echo "$response" | grep -q "success.*true"; then
        log_success "Communication frontend-backend r√©ussie !"
    else
        log_warning "Communication r√©ussie mais r√©ponse inattendue"
    fi
else
    log_error "Communication frontend-backend √©chou√©e"
fi
echo ""

# R√©sum√© et recommandations
echo "üéØ DIAGNOSTIC TERMIN√â"
echo "====================="
echo ""
echo "üåê URLs de Test :"
echo "   Frontend: $FRONTEND_URL"
echo "   Backend:  $BACKEND_URL"
echo ""
echo "üîß Actions recommand√©es :"
echo "   1. Ouvrir le frontend dans le navigateur"
echo "   2. Ouvrir les outils de d√©veloppement (F12)"
echo "   3. Aller dans l'onglet 'Console'"
echo "   4. Aller dans l'onglet 'Network'"
echo "   5. Recharger la page et observer les erreurs"
echo ""
echo "üì± Test manuel :"
echo "   Ouvrir: $FRONTEND_URL"
echo "   V√©rifier la console pour les erreurs exactes"

